generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(USER)
  status        UserStatus @default(PENDING)
  accounts      Account[]
  sessions      Session[]
  timesheets    Timesheet[]
  globalInvoiceSettings GlobalInvoiceSettings?
  invoiceTemplates      InvoiceTemplate[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt @default(now())
  lastLoginAt   DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Timesheet {
  id          String   @id @default(cuid())
  userId      String
  weekStart   DateTime
  weeklyTotal String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  dayEntries  DayEntry[]
  
  @@unique([userId, weekStart])
}

model DayEntry {
  id           String    @id @default(cuid())
  timesheetId  String
  dayName      String
  date         String
  startTime    String?
  breakHours   Int       @default(0)
  breakMinutes Int       @default(0)
  finishTime   String?
  totalHours   String?
  
  timesheet    Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
  
  @@unique([timesheetId, dayName])
}

// Global invoice settings - your contractor details
model GlobalInvoiceSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  contractorName  String
  abn             String
  bankBsb         String
  bankAccount     String
  addressLine1    String
  addressLine2    String?
  city            String
  state           String
  postcode        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Client-specific invoice templates with custom rates
model InvoiceTemplate {
  id              String   @id @default(cuid())
  userId          String
  templateName    String   // e.g. "Client A - Development", "Client B - Consulting"
  clientName      String
  dayRate         Float
  gstPercentage   Float    @default(0.10)
  
  // Optional: Override global settings per template
  customContractorName  String?
  customAbn            String?
  customBankBsb        String?
  customBankAccount    String?
  customAddress        String? // Full address override
  
  // Template settings
  isDefault       Boolean  @default(false)
  isActive        Boolean  @default(true)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, templateName])
}